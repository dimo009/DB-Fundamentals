--Exercise 1

--Import the database and send the total count of records to Mr. Bodrog. Make sure nothing got lost. 

SELECT COUNT (Id) AS [Count] FROM [dbo].[WizzardDeposits] 

--Exercise 2
--Select the size of the longest magic wand. Rename the new column appropriately. 

SELECT MAX([MagicWandSize]) AS[LongestMagicWand] FROM [dbo].[WizzardDeposits] 

--Exercise 3
--For wizards in each deposit group show the longest magic wand. Rename the new column appropriately. 

SELECT DepositGroup, MAX([MagicWandSize])  AS [LongestMagicWand ] 
FROM [dbo].[WizzardDeposits] 
GROUP BY [DepositGroup]

SELECT d.DepositGroup, MAX(d.MagicWandSize)
AS 'LongestMagicWand'
FROM [dbo].[WizzardDeposits] AS d
GROUP BY d.DepositGroup

--Exercise 4
--Select the deposit group with the lowest average wand size. 

SELECT DepositGroup 
FROM WizzardDeposits
GROUP BY DepositGroup
HAVING AVG (MagicWandSize) = (
        SELECT MIN (WandSizeTable.AverageSizes) AS MinimalSize
        FROM 
		(
			SELECT AVG (MagicWandSize) AS AverageSizes
            FROM WizzardDeposits
            GROUP BY DepositGroup
        ) AS WandSizeTable
)

SELECT DepositGroup, MagicWandSize FROM WizzardDeposits
GROUP BY DepositGroup, MagicWandSize
HAVING AVG(MagicWandSize) = (SELECT MIN(AVG(MagicWandSize)) 
FROM WizzardDeposits GROUP BY DepositGroup

--Exercise 4 II

SELECT TOP 1 with ties DepositGroup, AVG(MagicWandSize) as MinimalSize FROM WizzardDeposits
GROUP BY DepositGroup
Order BY AVG(MagicWandSize)

--Exercise 5
--Select all deposit groups and its total deposit sum. 
--Example: 
--DepositGroup TotalSum 
--Human Pride 1041291.52 

SELECT d.DepositGroup, SUM([DepositAmount]) AS [TotalSum] 
FROM [dbo].[WizzardDeposits] as d
GROUP BY d.DepositGroup

--Exercise 6
--Select all deposit groups and its total deposit sum but only for the wizards who has their magic wand 
--crafted by Ollivander family.

SELECT d.DepositGroup, SUM([DepositAmount]) AS [TotalSum] 
FROM [dbo].[WizzardDeposits] as d
GROUP BY d.DepositGroup,d.MagicWandCreator
HAVING  d.[MagicWandCreator] = 'Ollivander family'

--Exercise 7
--Select all deposit groups and its total deposit sum but only for the wizards who has their magic wand 
--crafted by Ollivander family. After this filter total deposit amounts lower than 150000. 
--Order by total deposit amount in descending order. 

SELECT d.DepositGroup, SUM([DepositAmount]) AS [TotalSum] 
FROM [dbo].[WizzardDeposits] as d
GROUP BY d.DepositGroup,d.MagicWandCreator
HAVING  d.[MagicWandCreator] = 'Ollivander family' AND SUM([DepositAmount])<150000
ORDER BY SUM([DepositAmount]) DESC

--Exercise 8
--Create a query that selects: 
--Deposit group  
--Magic wand creator 
--Minimum deposit charge for each group  
--Select the data in ascending order by MagicWandCreator and DepositGroup. 

SELECT d.DepositGroup, d.MagicWandCreator, MIN(DepositCharge) AS [MinDepositCharge] 
FROM [dbo].[WizzardDeposits] AS d
GROUP BY d.DepositGroup,d.MagicWandCreator
ORDER BY d.MagicWandCreator, d.DepositGroup

--Exercise 9
--Write down a query that creates 7 different groups based on their age. 
--Age groups should be as follows: 
--[0-10] 
--[11-20] 
--[21-30] 
--[31-40] 
--[41-50] 
--[51-60] 
--[61+] 
--The query should return 
--Age groups 
--Count of wizards in it 

SELECT 
CASE
WHEN Age <=10 THEN '[0-10]'
WHEN Age > 10 and Age <=20 THEN '[11-20]'
WHEN Age >20 and Age <=30 THEN '[21-30]'
WHEN Age >30 and Age <= 40 THEN '[31-40]'
WHEN Age >40 and Age <= 50 THEN '[31-40]'
WHEN Age >50 and Age <= 60 THEN '[31-40]'
ELSE '[61+]'


END AS AgeGroup, Count(*) as [WizzardCount]
FROM [dbo].[WizzardDeposits]
GROUP BY 
CASE
WHEN Age <=10 THEN '[0-10]'
WHEN Age > 10 and Age <=20 THEN '[11-20]'
WHEN Age >20 and Age <=30 THEN '[21-30]'
WHEN Age >30 and Age <= 40 THEN '[31-40]'
WHEN Age >40 and Age <= 50 THEN '[31-40]'
WHEN Age >50 and Age <= 60 THEN '[31-40]'
ELSE '[61+]'
END

--Does not work in Judge

SELECT G.AgeGroup, COUNT(G.Age)
FROM 
      (SELECT CASE WHEN Age <=10 THEN '[0-10]'
              WHEN Age > 10 and Age <=20 THEN '[11-20]'
              WHEN Age >20 and Age <=30 THEN '[21-30]'
              WHEN Age >30 and Age <= 40 THEN '[31-40]'
              WHEN Age >40 and Age <= 50 THEN '[31-40]'
              WHEN Age >50 and Age <= 60 THEN '[31-40]'
              ELSE '[61+]' END AgeGroup, Age
FROM [WizzardDeposits]
) G
GROUP BY G.[AgeGroup]

--Does not work in Judge

--Exercise 10
--Write a query that returns all unique wizard first letters of their first names only if they have deposit of type Troll Chest. 
--Order them alphabetically. Use GROUP BY for uniqueness. 

SELECT DISTINCT LEFT(W.FirstName,1) AS [FirstLetter] FROM [dbo].[WizzardDeposits] AS W
WHERE W.DepositGroup = 'Troll Chest'
GROUP BY LEFT(W.FirstName,1)
ORDER BY FirstLetter

--Exercise 11
--Mr. Bodrog is highly interested in profitability. He wants to know the average interest of all deposits groups split by whether
--the deposit has expired or not. But that’s not all. He wants you to select deposits with start date after 01/01/1985. 
--Order the data descending by Deposit Group and ascending by Expiration Flag. 

SELECT w.DepositGroup,w.IsDepositExpired, AVG(w.DepositInterest) AS 'AverageInterest' FROM [dbo].[WizzardDeposits] AS w
WHERE w.DepositStartDate >'1985-01-01'
GROUP BY w.DepositGroup, w.IsDepositExpired
ORDER BY w.DepositGroup DESC, w.IsDepositExpired


--Exercise 12
--Mr. Bodrog definitely likes his werewolves more than you. This is your last chance to survive! Give him some data to play his favorite game Rich Wizard, Poor Wizard. 
--The rules are simple: You compare the deposits of every wizard with the wizard after him. If a wizard is the last one in the database, simply ignore it. 
--In the end you have to sum the difference between the deposits. 

SELECT SUM(Diff.DifferenceOfSums)
FROM
	(SELECT h.DepositAmount -
		(SELECT DepositAmount 
		FROM WizzardDeposits
		WHERE Id = h.Id + 1
		) AS DifferenceOfSums
	 FROM WizzardDeposits h) AS Diff

--Exercise 12+1

--That’s it! You no longer work for Mr. Bodrog. You have decided to find a proper job as an analyst in SoftUni.  
--It’s not a surprise that you will use the SoftUni database. Things get more exciting here! 
--Create a query which shows the total sum of salaries for each department. Order by DepartmentID. 
--Your query should return: 
--DepartmentID 

SELECT e.DepartmentID, SUM(e.Salary) AS 'TotalSalary' FROM [dbo].[Employees] AS e
GROUP BY e.DepartmentID
ORDER BY e.DepartmentID

--Exercise 14

--Select the minimum salary from the employees for departments with ID (2,5,7) but only for those who are hired after 01/01/2000. 
--Your query should return: 
--DepartmentID

SELECT e.DepartmentID, MIN(e.Salary) AS 'MinimumSalary' FROM [dbo].[Employees] AS e
WHERE e.DepartmentID IN (2, 5, 7) AND e.HireDate > 2000-01-01 
GROUP BY e.DepartmentID
--ORDER BY e.DepartmentID

--Exercise 15 HOW TO set values from one table to another

--Select all employees who earn more than 30000 into a new table. Then delete all employees who has ManagerID = 42 (in the new table); 
--Then increase the salaries of all employees with DepartmentID=1 with 5000. Finally, select the average salaries in each department.

SELECT * INTO NewTable FROM Employees 
WHERE Salary > 30000
DELETE FROM NewTable
WHERE ManagerID = 42
UPDATE NewTable
SET Salary += 5000
WHERE DepartmentID = 1
SELECT DepartmentID, AVG(Salary) AS AverageSalary FROM NewTable
GROUP BY DepartmentID
-- SECOND OPTION
SELECT * INTO NEW_TABLE FROM Employees
WHERE Salary>30000
DELETE FROM NEW_TABLE
WHERE ManagerID=42
UPDATE NEW_TABLE
SET Salary +=5000
WHERE DepartmentID=1
SELECT DepartmentID, AVG(Salary) FROM NEW_TABLE
GROUP BY DepartmentID

--EXERCISE 16
--Find the max salary for each department. Filter those which have max salaries not in the range 30000 and 70000; 

SELECT e.DepartmentID, MAX(e.Salary) AS 'MaxSalary' FROM [dbo].[Employees] AS e

GROUP BY e.DepartmentID
HAVING MAX(e.Salary) NOT BETWEEN 30000 AND 70000


--Exercise 17
--Count the salaries of all employees who don’t have a manager. 

SELECT COUNT(e.Salary) as 'Count'
       FROM 
	       (SELECT Salary FROM Employees 
		   WHERE ManagerID IS NULL) AS e

SELECT COUNT(S.Salary) AS 'Count'
	FROM
		(SELECT Salary FROM Employees
		WHERE ManagerID IS NULL) AS S

--Exercise 18
--Find the third highest salary in each department if there is such.  

SELECT DepartmentID, 
	(SELECT DISTINCT Salary FROM Employees 
	 WHERE DepartmentID = e.DepartmentID 
	 ORDER BY Salary DESC OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY) AS ThirdHighestSalary
FROM Employees e

WHERE (SELECT DISTINCT Salary FROM Employees 
	 WHERE DepartmentID = e.DepartmentID 
	 ORDER BY Salary DESC OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY) IS NOT NULL
GROUP BY DepartmentID

--Exercise 19

--Write a query that returns: 
--FirstName 
--LastName 
--DepartmentID 
--Select all employees who have salary higher than the average salary of their respective departments. Select only the first 10 rows. Order by DepartmentID. 

SELECT TOP 10 e.FirstName, e.LastName, e.DepartmentId FROM Employees e
WHERE e.Salary  > (SELECT AVG(s.Salary)
					FROM (SELECT Salary, DepartmentID FROM Employees) AS s
					WHERE DepartmentID = e.DepartmentID)
