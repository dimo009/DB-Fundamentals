--Exercise 1 Find Names of All Employees by First Name (Starts with SA)
SELECT FirstName, LastName FROM Employees
WHERE FirstName LIKE 'SA%'

--Exercise 2 Find names of all employees by Last name - contains ei

SELECT FirstName, LastName FROM Employees
WHERE LastName LIKE '%ei%'

--Exercise 3 
--Write a SQL query to find the first names of all employees in the departments with ID 3 or 10 and whose hire year is
--between 1995 and 2005 inclusive. Submit your query statements as Prepare DB & run queries

SELECT FirstName FROM Employees
WHERE DATEPART(year,HireDate) BETWEEN 1995 and 2005 
AND DepartmentID IN(3,10)
--WHERE DATEPART(year,HireDate) BETWEEN DATEPART(year,Hiredate)='1995' AND DATEPART(year,Hiredate)=2005

--Exercise 4
--Write a SQL query to find the first and last names of all employees whose job titles does not contain “engineer”

SELECT FirstName, LastName FROM Employees
WHERE JobTitle NOT LIKE '%engineer%'

--Exercise 5
--Write a SQL query to find town names that are 5 or 6 symbols long and order them alphabetically by town name
--
SELECT Name FROM Towns
WHERE LEN(Name) IN (5,6)
ORDER BY Name

--Exercise 6
--Write a SQL query to find all towns that start with letters M, K, B or E. Order them alphabetically by town name

SELECT TownID,Name FROM Towns
WHERE Name LIKE '[M,B,E,K]%' 
ORDER BY Name

--Exercise 7
--Find towns not starting with letters R, B or D. Order them alphabetically by name

SELECT TownID,Name FROM Towns
WHERE Name NOT LIKE '[R,B,D]%' 
ORDER BY Name


--Exercise 8 Compile time error
--Create view Employees hired after 2000 year

CREATE VIEW V_EployeesAfter2000y AS
SELECT FirstName, LastName, HireDate FROM Employees
WHERE DATENAME(year,HireDate) > 2000
SELECT*FROM V_EployeesAfter2000y

--Exercise 8 II

CREATE VIEW V_EmployeesHiredAfter2000 AS
SELECT FirstName, LastName FROM Employees 
WHERE YEAR(HireDate) > 2000

--Exercise 9 Length of Last Name
SELECT FirstName, LastName FROM Employees
WHERE LEN(LastName) = 5

--Exercise 9 Length of Last Name
SELECT FirstName, LastName FROM Employees
WHERE LEN(LastName) = 5

--Exercise 10 Countries Holding 'A' 3 or more times  !VERY NICE! 
SELECT [CountryName],[IsoCode] FROM Countries
WHERE len(CountryName) - len(replace(CountryName, 'a', '')) >= 3
ORDER BY IsoCode

--Exercise 11

SELECT p.PeakName, r.RiverName, LOWER(p.PeakName + SUBSTRING(r.RiverName, 2, LEN(r.RiverName))) AS PeakRiver
FROM Peaks AS p, Rivers AS r
WHERE RIGHT(p.PeakName, 1) = LEFT(r.RiverName, 1)
OrDER BY PeakRiver

--Exercise 12 Games from 2011 and 2012

SELECT TOP(50) Name,FORMAT(Start,'yyyy-MM-dd') AS [S] from Games
WHERE DATENAME(year,Start) IN (2011,2012)
ORDER BY Start,Name

--Exercise 12 II

select top 50 g.Name as Game,
FORMAT(Start, 'yyyy-MM-dd') as S
 from Games g
 where year(g.Start)= 2011 or year(g.Start) =  2012
 order by g.Start, g.Name

--Exercise 12+1
--Find all users along with information about their email providers. Display the username and email provider. Sort the
--results by email provider alphabetically, then by username. Submit your query statements as Prepare DB & run queries.

SELECT Username , SUBSTRING(Email,(CHARINDEX('@',Email)+1),LEN(Email) - (CHARINDEX('@',Email))) AS [Email Provider] 
FROM Users
ORDER BY [Email Provider], Username

--Exercise 13 II

SELECT Username, SUBSTRING(Email, CHARINDEX('@',Email)+1,LEN(Email)) AS [Email Provider] FROM Users
ORDER BY SUBSTRING(Email, CHARINDEX('@',Email)+1,LEN(Email)),Username

--BOTH Solutions work in Judge

--Exercise 14
--Find all users along with their IP addresses sorted by username alphabetically. 
--Display only rows that IP address matches the pattern: “***.1^.^.***”. Submit your query statements as Prepare DB & run queries. 
SELECT Username AS [Username], IpAddress AS [IP Address]
FROM Users 
WHERE IpAddress like '[0-9][0-9][0-9].1%.%.[0-9][0-9][0-9]'  --OR '___.1%.%.___'
ORDER BY [Username]

--Exercise 15
--Find all games with part of the day and duration sorted by game name alphabetically then by duration and part of the day (all ascending). Parts of the day should be Morning (time is >= 0 and < 12), 
--Afternoon (time is >= 12 and < 18), Evening (time is >= 18 and < 24). Duration should be Extra Short (smaller or equal to 3), Short (between 4 and 6 including), Long (greater than 6) and Extra Long (without duration). 
--Submit your query statements as Prepare DB & run queries. 

USE [Diablo]
SELECT Name AS [Game],
CASE
WHEN DATEPART(HOUR,Start) >=0 AND DATEPART(HOUR,Start) <12  THEN 'Morning'
WHEN DATEPART(HOUR,Start) >=12 AND DATEPART(HOUR,Start) <18  THEN 'Afternoon'
ELSE 'Evening'
END
AS [Part of the day],
CASE
WHEN Duration<=3 THEN 'Extra short'
WHEN Duration >=4 and Duration <= 6 THEN 'Short'
WHEN Duration > 6 THEN 'Long'
ELSE 'Extra Long'
END
AS [Duration]
FROM [dbo].[Games]
ORDER BY Name,Duration,Start

--Does not work in Judge

--Exercise 15 II Z

SELECT Name AS Game, 'Part Of The Day' =
	CASE 
		WHEN (DATEPART(HOUR, Start)) BETWEEN 0 AND 11 THEN 'Morning'
		WHEN (DATEPART(HOUR, Start)) BETWEEN 12 AND 17  THEN 'Afternoon'
		WHEN (DATEPART(HOUR, Start)) BETWEEN 18 AND 23  THEN 'Evening'
	END,
	Duration = 
	CASE 
		WHEN Duration <= 3 THEN 'Extra Short'
		WHEN Duration >= 4 AND Duration <=6 THEN 'Short'
		WHEN Duration > 6 THEN 'Long'
		WHEN Duration IS NULL THEN 'Extra Long'
	END
FROM Games
ORDER BY Game, Duration, 'Part Of The Day'

--Exercise 16
--You are given a table Orders(Id, ProductName, OrderDate) filled with data. Consider that the payment for that order must be accomplished within 3 days after the order date. 
--Also the delivery date is up to 1 month. Write a query to show each product’s name, order date, pay and deliver due dates. Submit your query statements as Prepare DB & run queries. 

USE [OrdersS]
SELECT ProductName, 
OrderDate, 
DATEADD(DAY,3,OrderDate) AS 'Pay Due', 
DATEADD(MONTH,1,OrderDate) AS 'Delivery Due' 
FROM OrdersS

--Does not work in Judge

--Exercise 16 II Z
USE [Orders]
SELECT ProductName, OrderDate, 
DATEADD(Day, 3, OrderDate) AS 'Pay Due',
DATEADD(Month, 1, OrderDate) AS 'Deliver Due'
FROM Orders


