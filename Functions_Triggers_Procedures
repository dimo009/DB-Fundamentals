CREATE DATABASE Bank
GO
USE Bank
GO
CREATE TABLE AccountHolders
(
Id INT NOT NULL,
FirstName VARCHAR(50) NOT NULL,
LastName VARCHAR(50) NOT NULL,
SSN CHAR(10) NOT NULL
CONSTRAINT PK_AccountHolders PRIMARY KEY (Id)
)

CREATE TABLE Accounts
(
Id INT NOT NULL,
AccountHolderId INT NOT NULL,
Balance MONEY DEFAULT 0
CONSTRAINT PK_Accounts PRIMARY KEY (Id)
CONSTRAINT FK_Accounts_AccountHolders FOREIGN KEY (AccountHolderId) REFERENCES AccountHolders(Id)
)

INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (1, 'Susan', 'Cane', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (2, 'Kim', 'Novac', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (3, 'Jimmy', 'Henderson', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (4, 'Steve', 'Stevenson', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (5, 'Bjorn', 'Sweden', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (6, 'Kiril', 'Petrov', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (7, 'Petar', 'Kirilov', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (8, 'Michka', 'Tsekova', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (9, 'Zlatina', 'Pateva', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (10, 'Monika', 'Miteva', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (11, 'Zlatko', 'Zlatyov', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (12, 'Petko', 'Petkov Junior', '1234567890');

INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (1, 1, 123.12);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (2, 3, 4354.23);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (3, 12, 6546543.23);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (4, 9, 15345.64);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (5, 11, 36521.20);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (6, 8, 5436.34);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (7, 10, 565649.20);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (8, 11, 999453.50);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (9, 1, 5349758.23);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (10, 2, 543.30);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (11, 3, 10.20);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (12, 7, 245656.23);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (13, 5, 5435.32);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (14, 4, 1.23);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (15, 6, 0.19);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (16, 2, 5345.34);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (17, 11, 76653.20);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (18, 1, 235469.89);

-- Exercise 1 Employees with salary above 35000 CREATE PROCEDURES
CREATE PROC usp_GetEmployeesSalaryAbove35000 
AS SELECT 
E.FirstName,
E.LastName
FROM Employees AS E
WHERE E.Salary > 35000
GO
EXEC usp_GetEmployeesSalaryAbove35000

--Exercise 2 

CREATE PROC usp_GetEmployeesSalaryAboveNumber (@number Money)
AS
BEGIN
SELECT FirstName AS 'First Name', LastName AS 'Last Name' FROM Employees as E
WHERE E.Salary >= @number
END

EXEC usp_GetEmployeesSalaryAboveNumber 48100

--Exercise 3 Town name starting with 

CREATE PROCEDURE usp_GetTownsStartingWith (@param varchar(50))
AS
BEGIN
SELECT Name AS 'Town' FROM Towns AS T
WHERE SUBSTRING(T.Name,1,1) = @param 
END
--Result 20/100

CREATE PROCEDURE usp_GetTownsStartingWith (@param varchar(50))
AS
BEGIN
SELECT Name AS 'Town' FROM Towns AS T
WHERE T.Name LIKE @param+'%' 
END

EXEC usp_GetTownsStartingWith_II b
--RESULT 100/100


--Exercise 4 Employees from Town

CREATE PROCEDURE usp_GetEmployeesFromTown (@TownName varchar(50))
AS
BEGIN
SELECT 
E.FirstName as 'First name',
E.LastName AS 'Last name'
FROM Employees as E
INNER JOIN Addresses AS A
ON E.AddressID=A.AddressID
INNER JOIN Towns AS T
ON A.TownID = T.TownID 
WHERE T.Name = @TownName
END

EXEC usp_GetEmployeesFromTown Sofia

--Exercise 5 	Salary Level Function

CREATE FUNCTION udf_GetSalaryLevel (@salary money)
RETURNS VARCHAR(10)
AS
BEGIN
DECLARE @salaryLevel NVARCHAR(10)
IF(@salary) <30000
SET @salaryLevel = 'Low'
ELSE IF (@salary between 30000 and 50000)
SET @salaryLevel = 'Average'
ELSE
SET @salaryLevel = 'High'
RETURN @salaryLevel
END
SELECT Salary, dbo.udf_GetSalaryLevel(Salary) AS 'Salary Level' FROM Employees

--II Z_Option
CREATE FUNCTION ufn_GetSalaryLevel(@salary MONEY)
RETURNS NVARCHAR(10)
AS
BEGIN
	RETURN
		CASE 
			WHEN @salary < 30000 THEN 'Low'
			WHEN @salary BETWEEN 30000 AND 50000 THEN 'Average'
			WHEN @salary > 50000 THEN 'High'
		END
END

SELECT Salary, dbo.ufn_GetSalaryLevel(Salary) AS 'Salary Level'
FROM Employees


--Exercise 6
CREATE PROCEDURE usp_EmployeesBySalaryLevel (@LevelOfSalary varchar(10))
AS
BEGIN
SELECT 
FirstName AS [First name],
LastName As [Last name],
Salary 
FROM Employees
WHERE dbo.ufn_GetSalaryLevel(Salary) = @LevelOfSalary

END

EXEC usp_EmployeesBySalaryLevel 'High'

--Exercise 6 II Z

CREATE PROCEDURE usp_EmployeesBySalaryLevel (@level NVARCHAR(10))
AS 
BEGIN
	SELECT 
		s.FirstName AS 'First Name',
		s.LastName AS 'Last Name'
	FROM (SELECT FirstName, LastName, Salary, 
				dbo.ufn_GetSalaryLevel(Salary) AS sLevel
			FROM Employees) s
	WHERE s.sLevel = @level
END

--Exercise 7
--Define a function ufn_IsWordComprised(@setOfLetters, @word) that returns true or false depending on that if the word is a comprised of the given set of letters. 
--Submit your query statement as Run skeleton, run queries & check DB in Judge.


GO
CREATE FUNCTION ufn_IsWordComprised(@setOfLetters varchar(max), @word varchar(max))
RETURNS BIT
AS
BEGIN
	DECLARE @length INT = Len(@word)
	DECLARE @index INT = 1

	WHILE (@index<=@length)
	BEGIN
		DECLARE @char CHAR (1) = SUBSTRING(@word,@index,1)
		IF(CHARINDEX(@char,@setOfLetters)<=0)
		BEGIN
		   RETURN 0
		END
		SET @index = @index + 1
	END
	RETURN 1
END 

SELECT dbo.ufn_IsWordComprised('oistmiahf','Sofia') AS 

--Exercise 8

BEGIN TRANSACTION
ALTER TABLE Departments
ALTER COLUMN ManagerId INT NULL

SELECT E.EmployeeID FROM Employees AS E
INNER JOIN Departments AS D
ON E.DepartmentID = D.DepartmentID
WHERE D.Name IN ('Production', 'Production control')

DELETE FROM EmployeesProjects
WHERE EmployeeID IN (
			SELECT E.EmployeeID FROM Employees AS E
			INNER JOIN Departments AS D
			ON E.DepartmentID = D.DepartmentID
			WHERE D.Name IN ('Production', 'Production control')
			)
UPDATE Employees
SET ManagerID = NULL
WHERE ManagerID IN (
			SELECT E.EmployeeID FROM Employees AS E
			INNER JOIN Departments AS D
			ON E.DepartmentID = D.DepartmentID
			WHERE D.Name IN ('Production', 'Production control')
			)

UPDATE Departments
SET ManagerID = NULL
WHERE ManagerID IN (
			SELECT E.EmployeeID FROM Employees AS E
			INNER JOIN Departments AS D
			ON E.DepartmentID = D.DepartmentID
			WHERE D.Name IN ('Production', 'Production control')
			)

DELETE FROM Employees 
WHERE EmployeeID IN (
SELECT E.EmployeeID FROM Employees AS E
			INNER JOIN Departments AS D
			ON E.DepartmentID = D.DepartmentID
			WHERE D.Name IN ('Production', 'Production control')
			)

DELETE FROM Departments
WHERE Name IN ('Production', 'Production control')

ROLLBACK

--Exercise 9

CREATE PROCEDURE udp_AssignProject (@EmployeeID INT, @ProjectID INT)
AS
BEGIN
DECLARE @maxEmployeeProjectsCount INT = 3
DECLARE @employeeProjectsCount INT
SET @employeeProjectsCount = (SELECT COUNT(*)
FROM [dbo].[EmployeesProjects] AS ep
WHERE ep.EmployeeId = @EmployeeID)

BEGIN TRAN
INSERT INTO [dbo].[EmployeesProjects](EmployeeID, ProjectID)
VALUES (@EmployeeID, @ProjectID)
IF(@employeeProjectsCount >= @maxEmployeeProjectsCount)
BEGIN
RAISERROR('The employee has too many projects!', 16, 1)
ROLLBACK
END
ELSE
COMMIT

END

--Exercise 10

CREATE PROCEDURE usp_GetHoldersFullName
AS
SELECT 
[FirstName] + ' ' + LastName AS [Full Name] FROM [dbo].[AccountHolders]

EXEC dbo.usp_GetHoldersFullName


--Exercise 11
--Your task is to create a stored procedure usp_GetHoldersWithBalanceHigherThan that accepts a number as a parameter and returns all people who have more money in total of all their accounts
-- than the supplied number. Submit your query statement as Run skeleton, run queries & check DB in Judge. 

CREATE PROCEDURE usp_GetHoldersWithBalanceHigherThan (@sum money)
AS
BEGIN
SELECT 
AH.FirstName,
AH.LastName
FROM [dbo].[AccountHolders] AS AH
INNER JOIN [dbo].[Accounts] AS A
ON AH.Id = A.AccountHolderId
GROUP BY AH.FirstName,AH.LastName
HAVING SUM(A.Balance) >= @sum
END

EXEC usp_GetHoldersWithBalanceHigherThan 1000000

SELECT * FROM [dbo].[AccountHolders]
SELECT * FROM [dbo].[Accounts]

--II option
CREATE PROCEDURE usp_GetHoldersWithBalanceHigherThan (@sum money)
AS
BEGIN
SELECT 
AH.FirstName,
AH.LastName
FROM [dbo].[AccountHolders] AS AH
INNER JOIN
(
SELECT AccountHolderID, SUM(Balance) AS TotalSUM 
FROM Accounts
GROUP BY AccountHolderId
HAVING SUM(Balance) > @sum
) AS balances ON [Id] = balances.AccountHolderId
END

CREATE PROCEDURE usp_GetHoldersWithBalanceHigherThan (@sum money)
AS
BEGIN


SELECT 
AH.FirstName,
AH.LastName
FROM [dbo].[AccountHolders] AS AH
INNER JOIN [dbo].[Accounts] AS A
ON AH.Id = A.AccountHolderId
GROUP BY A.AccountHolderId, AH.FirstName,AH.LastName
HAVING SUM(A.Balance) > @sum
END


--Exercise 12

CREATE FUNCTION ufn_CalculateFutureValue(@sum money, @interestRateYearly float, @numOfYears INT)
RETURNS MONEY
AS
BEGIN
DECLARE @arg INT = 1
WHILE (@arg<=@numOfYears)
BEGIN
SET @sum=@sum+@sum*@interestRateYearly
SET @arg +=1
END
RETURN @sum
     --SET @sum = @sum*(POWER(1+@interestRateYearly,@numOfYears)
END

--Exercise 13

CREATE PROCEDURE usp_CalculateFutureValueForAccount(@AccountId INT, @interestRate FLOAT)
AS
BEGIN

SELECT A.Id, 
AH.[FirstName] AS 'First name',
AH.LastName AS 'Last Name',
A.Balance AS 'Current balance',
dbo.ufn_CalculateFutureValue(A.Balance,@interestRate,5) AS 'Balance in 5 years'
FROM [dbo].[Accounts] AS A
INNER JOIN [dbo].[AccountHolders] AS AH
ON A.AccountHolderId=AH.Id
WHERE A.Id=@AccountId
END

--Exercise 14

